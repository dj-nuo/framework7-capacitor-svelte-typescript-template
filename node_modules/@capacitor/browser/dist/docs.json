{
  "api": {
    "name": "BrowserPlugin",
    "slug": "browserplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "open",
        "signature": "(options: OpenOptions) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "OpenOptions"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Open a page with the specified options.",
        "complexTypes": [
          "OpenOptions"
        ],
        "slug": "open"
      },
      {
        "name": "close",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Web & iOS only: Close an open browser window.\n\nNo-op on other platforms.",
        "complexTypes": [],
        "slug": "close"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'browserFinished', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'browserFinished'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Android & iOS only: Listen for the browser finished event.\nIt fires when the Browser is closed by the user.",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerbrowserfinished"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'browserPageLoaded', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'browserPageLoaded'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Android & iOS only: Listen for the page loaded event.\nIt's only fired when the URL passed to open method finish loading.\nIt is not invoked for any subsequent page loads.",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerbrowserpageloaded"
      },
      {
        "name": "removeAllListeners",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Remove all native listeners for this plugin.",
        "complexTypes": [],
        "slug": "removealllisteners"
      }
    ],
    "properties": []
  },
  "interfaces": [
    {
      "name": "OpenOptions",
      "slug": "openoptions",
      "docs": "Represents the options passed to `open`.",
      "tags": [
        {
          "text": "1.0.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "url",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The URL to which the browser is opened.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "windowName",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Web only: Optional target for browser open. Follows\nthe `target` property for window.open. Defaults\nto _blank.\n\nIgnored on other platforms.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "toolbarColor",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "A hex color to which the toolbar color is set.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "presentationStyle",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "iOS only: The presentation style of the browser. Defaults to fullscreen.\n\nIgnored on other platforms.",
          "complexTypes": [],
          "type": "'fullscreen' | 'popover' | undefined"
        },
        {
          "name": "width",
          "tags": [
            {
              "text": "4.0.0",
              "name": "since"
            }
          ],
          "docs": "iOS only: The width the browser when using presentationStyle 'popover' on iPads.\n\nIgnored on other platforms.",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "height",
          "tags": [
            {
              "text": "4.0.0",
              "name": "since"
            }
          ],
          "docs": "iOS only: The height the browser when using presentationStyle 'popover' on iPads.\n\nIgnored on other platforms.",
          "complexTypes": [],
          "type": "number | undefined"
        }
      ]
    },
    {
      "name": "PluginListenerHandle",
      "slug": "pluginlistenerhandle",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "remove",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "() => Promise<void>"
        }
      ]
    }
  ],
  "enums": [],
  "typeAliases": [],
  "pluginConfigs": []
}